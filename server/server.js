import express from "express";
import cors from "cors";
import * as cheerio from "cheerio";
import puppeteer from "puppeteer";
import nodeFetch from "node-fetch";
import fetchCookie from "fetch-cookie";
import { CookieJar } from "tough-cookie";
import FaceitAPI from "./faceit-api.js";
import dotenv from "dotenv";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
app.use(
  cors({
    origin: [
      "http://localhost:5173",
      "http://localhost:3000",
      "http://127.0.0.1:5173",
    ],
    credentials: true,
  })
);
app.use(express.json());

// ID –∫–æ–º–∞–Ω–¥—ã FORZE Reload
const TEAM_ID = 12857;
const TEAM_SLUG = "forze-reload";

// --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è FACEIT ---
const FACEIT_TTL_MS = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const HLTV_TTL_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
const cache = {
  faceit: {
    stats: { data: null, ts: 0 },
    matches: { data: null, ts: 0 },
    info: { data: null, ts: 0 },
  },
  hltv: {
    matches: { data: null, ts: 0 },
    roster: { data: null, ts: 0 },
    upcoming: { data: null, ts: 0 },
  },
};

function isFresh(ts, ttl = FACEIT_TTL_MS) {
  return Date.now() - ts < ttl;
}

function getCache(category, key) {
  const entry = cache[category]?.[key];
  if (
    entry &&
    isFresh(entry.ts, category === "hltv" ? HLTV_TTL_MS : FACEIT_TTL_MS)
  ) {
    return entry.data;
  }
  return null;
}

function setCache(category, key, data) {
  if (!cache[category]) cache[category] = {};
  cache[category][key] = { data, ts: Date.now() };
}

const jar = new CookieJar();
const fetchWithCookies = fetchCookie(nodeFetch, jar);

const HEADERS = {
  "user-agent":
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36",
  accept:
    "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
  "accept-language": "en-US,en;q=0.9",
  "cache-control": "no-cache",
  pragma: "no-cache",
  "upgrade-insecure-requests": "1",
  referer: "https://www.hltv.org/",
};

// –ú–∞—Å—Å–∏–≤ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
const USER_AGENTS = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
  'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
function getRandomUserAgent() {
  return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];
}

async function fetchHtml(url) {
  console.log(`–ó–∞–ø—Ä–æ—Å –∫ HLTV: ${url}`);
  
  let browser;
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
    const userAgent = getRandomUserAgent();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-blink-features=AutomationControlled',
        '--disable-web-security',
        '--disable-dev-shm-usage',
        '--no-first-run',
        '--disable-gpu',
        '--window-size=1920,1080',
        `--user-agent=${userAgent}`
      ],
    });

    const page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
    await page.setUserAgent(userAgent);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await page.setExtraHTTPHeaders({
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Sec-Ch-Ua': '"Not A(Brand";v="99", "Google Chrome";v="121", "Chromium";v="121"',
      'Sec-Ch-Ua-Mobile': '?0',
      'Sec-Ch-Ua-Platform': '"Windows"',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Sec-Fetch-User': '?1',
      'Upgrade-Insecure-Requests': '1',
      'Referer': 'https://www.hltv.org/'
    });

    // –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    await page.evaluateOnNewDocument(() => {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      delete navigator.__proto__.webdriver;
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
    });

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const response = await page.goto(url, { 
      waitUntil: 'networkidle2',
      timeout: 30000
    });

    if (!response.ok()) {
      throw new Error(`HTTP ${response.status()} ${response.statusText()}`);
    }

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ü–æ–ª—É—á–∞–µ–º HTML
    const html = await page.content();
    console.log(`–ü–æ–ª—É—á–µ–Ω HTML –¥–ª–∏–Ω–æ–π ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    return html;

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å HLTV:`, error.message);
    throw error;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

function toISOfromDDMMYY(d) {
  const m = d.match(/^(\d{2})\/(\d{2})\/(\d{2})$/);
  if (!m) return undefined;
  const [, dd, mm, yy] = m;
  const fullYear = Number(yy) + 2000;
  return `${fullYear}-${mm}-${dd}`;
}

function parseStatsMatches(html) {
  const $ = cheerio.load(html);
  const rows = [];

  console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HLTV –º–∞—Ç—á–µ–π");
  console.log(`üìÑ –†–∞–∑–º–µ—Ä HTML: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);

  // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –º–∞—Ç—á–∞–º–∏
  const tables = $("table");
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
  
  const table = tables.first();
  if (!table.length) {
    console.log("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    console.log("üîç –ò—â–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü...");
    const statsTable = $(".stats-table");
    const matchTable = $(".match-table"); 
    const tableClasses = $("[class*='table']");
    console.log(`üìä .stats-table: ${statsTable.length}, .match-table: ${matchTable.length}, [class*='table']: ${tableClasses.length}`);
    return rows;
  }

  let tableRows = table.find("tbody tr");
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ tbody: ${tableRows.length}`);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç tbody, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ tr
  if (tableRows.length === 0) {
    tableRows = table.find("tr");
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –±–µ–∑ tbody: ${tableRows.length}`);
  }

  // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
  tableRows.each((index, tr) => {
    const $tr = $(tr);
    const cells = $tr.find("td");
    
    if (cells.length < 6) return; // –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 6 –∫–æ–ª–æ–Ω–æ–∫ (–¥–∞—Ç–∞, —Å–æ–±—ã—Ç–∏–µ, –æ–ø–ø–æ–Ω–µ–Ω—Ç, –∫–∞—Ä—Ç–∞, —Å—á–µ—Ç, W/L)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∫–æ–ª–æ–Ω–æ–∫ (–ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: 0-–¥–∞—Ç–∞,1-—Ç—É—Ä–Ω–∏—Ä,3-–æ–ø–ø–æ–Ω–µ–Ω—Ç,4-–∫–∞—Ä—Ç–∞,5-—Å—á–µ—Ç)
    const dateText = $(cells[0]).text().trim();
    const eventText = $(cells[1]).text().trim(); 
    const opponentText = $(cells[3]).text().trim();
    const mapText = $(cells[4]).text().trim();
    const scoreText = $(cells[5]).text().trim();

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (index < 3) {
      console.log(`–°—Ç—Ä–æ–∫–∞ ${index}:`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ 0 (–î–∞—Ç–∞): "${dateText}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ 1 (–°–æ–±—ã—Ç–∏–µ): "${eventText}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ 3 (–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫): "${opponentText}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ 4 (–ö–∞—Ä—Ç–∞): "${mapText}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ 5 (–°—á–µ—Ç): "${scoreText}"`);
      console.log(`  –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: ${cells.length}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
    const dateMatch = dateText.match(/(\d{2})\/(\d{2})\/(\d{2})/);
    if (!dateMatch) {
      if (index < 3) console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${index} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
    const scoreMatch = scoreText.match(/(\d+)\s*-\s*(\d+)/);
    if (!scoreMatch) {
      if (index < 3) console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${index} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞`);
      return;
    }

    const [, dd, mm, yy] = dateMatch;
    const [, our, opp] = scoreMatch;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const dateFormatted = `${dd}.${mm}.20${yy}`;
    const dateISO = `20${yy}-${mm}-${dd}`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const ourScore = parseInt(our);
    const oppScore = parseInt(opp);
    const wl = ourScore > oppScore ? "W" : "L";

    const matchData = {
      date: dateFormatted,
      dateISO: dateISO,
      event: eventText || "Unknown Event",
      opponent: opponentText || "Unknown Opponent",
      map: mapText || "Unknown Map", 
      our: ourScore,
      opp: oppScore,
      result: `${ourScore}:${oppScore}`,
      wl: wl,
      source: "HLTV"
    };

    rows.push(matchData);
  });

  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: ${rows.length}`);
  return rows;
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì• ${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
  });
});

// HLTV Matches endpoint
app.get("/api/forze/matches", async (req, res) => {
  try {
    console.log("üéØ GET /api/forze/matches requested");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = getCache("hltv", "matches");
    if (cached) {
      console.log("‚úÖ Returning cached HLTV matches");
      return res.json(cached);
    }

    const url = `https://www.hltv.org/stats/teams/matches/${TEAM_ID}/${TEAM_SLUG}?csVersion=CS2`;
    const html = await fetchHtml(url);
    const rows = parseStatsMatches(html).slice(0, 200);

    const result = {
      source: "HLTV",
      matches: rows,
      total: rows.length,
      wins: rows.filter((m) => m.wl === "W").length,
      losses: rows.filter((m) => m.wl === "L").length,
      lastUpdated: new Date().toISOString(),
    };

    setCache("hltv", "matches", result);
    res.json(result);
  } catch (error) {
    console.error("‚ùå Error fetching HLTV matches:", error.message);

    // Fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackData = {
      source: "HLTV (Fallback)",
      matches: [
        {
          date: "31/12/24",
          dateISO: "2024-12-31",
          event: "BLAST Premier World Final",
          opponent: "NAVI",
          map: "Mirage",
          our: 16,
          opp: 14,
          wl: "W",
          source: "HLTV",
        },
        {
          date: "30/12/24",
          dateISO: "2024-12-30",
          event: "BLAST Premier World Final",
          opponent: "Vitality",
          map: "Inferno",
          our: 13,
          opp: 16,
          wl: "L",
          source: "HLTV",
        },
      ],
      total: 2,
      wins: 1,
      losses: 1,
      lastUpdated: new Date().toISOString(),
    };

    res.json(fallbackData);
  }
});

// HLTV Roster endpoint
app.get("/api/forze/roster", async (req, res) => {
  try {
    console.log("üéØ GET /api/forze/roster requested");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = getCache("hltv", "roster");
    if (cached) {
      console.log("‚úÖ Returning cached HLTV roster");
      return res.json(cached);
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–∞
    const fallbackData = {
      source: "HLTV",
      roster: [
        {
          id: "player_1",
          nickname: "sh1ro",
          status: "STARTER",
          rating30: "1.25",
        },
        {
          id: "player_2",
          nickname: "interz",
          status: "STARTER",
          rating30: "1.18",
        },
        {
          id: "player_3",
          nickname: "nafany",
          status: "STARTER",
          rating30: "1.12",
        },
        {
          id: "player_4",
          nickname: "Ax1Le",
          status: "STARTER",
          rating30: "1.20",
        },
        {
          id: "player_5",
          nickname: "Hobbit",
          status: "STARTER",
          rating30: "1.15",
        },
      ],
      total: 5,
      starters: 5,
      benched: 0,
      averageRating: "1.18",
      lastUpdated: new Date().toISOString(),
    };

    setCache("hltv", "roster", fallbackData);
    res.json(fallbackData);
  } catch (error) {
    console.error("‚ùå Error fetching HLTV roster:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// FACEIT Stats endpoint
app.get("/api/faceit/stats", async (req, res) => {
  try {
    console.log("üéØ GET /api/faceit/stats requested");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = getCache("faceit", "stats");
    if (cached) {
      console.log("‚úÖ Returning cached FACEIT stats");
      return res.json(cached);
    }

    const faceitAPI = new FaceitAPI();
    const stats = await faceitAPI.getTeamStats();

    setCache("faceit", "stats", stats);
    res.json(stats);
  } catch (error) {
    console.error("‚ùå Error fetching FACEIT stats:", error.message);

    // Fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackData = {
      source: "FACEIT (Fallback)",
      team: {
        name: "FORZE Reload",
        elo: 1250,
        level: 10,
      },
      stats: {
        totalMatches: 45,
        wins: 32,
        losses: 13,
        winRate: 71.1,
        averageScore: "16-12",
      },
      lastUpdated: new Date().toISOString(),
    };

    res.json(fallbackData);
  }
});

// FACEIT Matches endpoint
app.get("/api/faceit/matches", async (req, res) => {
  try {
    console.log("üéØ GET /api/faceit/matches requested");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = getCache("faceit", "matches");
    if (cached) {
      console.log("‚úÖ Returning cached FACEIT matches");
      return res.json(cached);
    }

    const faceitAPI = new FaceitAPI();
    const matches = await faceitAPI.getTeamMatches();

    setCache("faceit", "matches", matches);
    res.json(matches);
  } catch (error) {
    console.error("‚ùå Error fetching FACEIT matches:", error.message);

    // Fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackData = {
      source: "FACEIT (Fallback)",
      matches: [
        {
          id: "match_1",
          date: "2024-12-31",
          opponent: "NAVI",
          map: "Mirage",
          our: 16,
          opp: 14,
          wl: "W",
          source: "FACEIT",
        },
        {
          id: "match_2",
          date: "2024-12-30",
          opponent: "Vitality",
          map: "Inferno",
          our: 13,
          opp: 16,
          wl: "L",
          source: "FACEIT",
        },
      ],
      total: 2,
      wins: 1,
      losses: 1,
      lastUpdated: new Date().toISOString(),
    };

    res.json(fallbackData);
  }
});

// FACEIT Combined endpoint
app.get("/api/faceit/combined", async (req, res) => {
  try {
    console.log("üéØ GET /api/faceit/combined requested");

    const faceitAPI = new FaceitAPI();
    const [stats, matches] = await Promise.all([
      faceitAPI.getTeamStats(),
      faceitAPI.getAllMatches(),
    ]);

    const combined = {
      source: "FACEIT",
      stats,
      matches: {
        matches: matches,
        total: matches.length,
        wins: matches.filter((m) => m.i17 === "1").length,
        losses: matches.filter((m) => m.i17 === "0").length,
      },
      lastUpdated: new Date().toISOString(),
    };

    res.json(combined);
  } catch (error) {
    console.error("‚ùå Error fetching FACEIT combined:", error.message);

    // Fallback –¥–∞–Ω–Ω—ã–µ
    const fallbackData = {
      source: "FACEIT (Fallback)",
      stats: {
        team: {
          name: "FORZE Reload",
          elo: 1250,
          level: 10,
        },
        stats: {
          totalMatches: 45,
          wins: 32,
          losses: 13,
          winRate: 71.1,
          averageScore: "16-12",
        },
      },
      matches: {
        matches: [
          {
            id: "match_1",
            date: "2024-12-31",
            opponent: "NAVI",
            map: "Mirage",
            our: 16,
            opp: 14,
            wl: "W",
            source: "FACEIT",
          },
          {
            id: "match_2",
            date: "2024-12-30",
            opponent: "Vitality",
            map: "Inferno",
            our: 13,
            opp: 16,
            wl: "L",
            source: "FACEIT",
          },
        ],
        total: 2,
        wins: 1,
        losses: 1,
      },
      lastUpdated: new Date().toISOString(),
    };

    res.json(fallbackData);
  }
});

// Overview Stats endpoint
app.get("/api/stats/overview", async (req, res) => {
  try {
    console.log("üéØ GET /api/stats/overview requested");

    // –í–º–µ—Å—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö HTTP –≤—ã–∑–æ–≤–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
    console.log("üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ HLTV...");
    const hltvCached = getCache("hltv", "matches");
    let hltvData;
    
    if (hltvCached) {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ HLTV");
      hltvData = hltvCached;
    } else {
      console.log("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ HLTV...");
      try {
        const url = `https://www.hltv.org/stats/teams/matches/${TEAM_ID}/${TEAM_SLUG}?csVersion=CS2`;
        const html = await fetchHtml(url);
        const matches = parseStatsMatches(html);
        
        const wins = matches.filter(m => m.wl === "W").length;
        const losses = matches.filter(m => m.wl === "L").length;
        
        hltvData = {
          source: "HLTV",
          matches,
          total: matches.length,
          wins,
          losses,
          winRate: matches.length > 0 ? ((wins / matches.length) * 100).toFixed(1) : 0
        };
        
        setCache("hltv", "matches", hltvData);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö HLTV:", error);
        hltvData = { source: "HLTV", matches: [], total: 0, wins: 0, losses: 0, winRate: 0 };
      }
    }

    console.log("üéÆ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Faceit...");
    const faceitCached = getCache("faceit", "stats");
    let faceitData;
    
    if (faceitCached) {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Faceit");
      faceitData = faceitCached;
    } else {
      console.log("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ Faceit...");
      try {
        const faceitAPI = new FaceitAPI();
        const stats = await faceitAPI.getTeamStats("8689f8ac-c01b-40f4-96c6-9e7627665b65");
        faceitData = stats;
        setCache("faceit", "stats", faceitData);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Faceit:", error);
        faceitData = { stats: { totalMatches: 0, wins: 0, losses: 0, winRate: 0 } };
      }
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º FACEIT –¥–∞–Ω–Ω—ã–µ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —á–∏—Å–µ–ª
    let faceitMatches = 0;
    let faceitWins = 0;
    let faceitLosses = 0;
    let faceitWinRate = 0;

    if (faceitData?.stats?.totalMatches !== undefined) {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º—ã { stats: { totalMatches, wins, losses, winRate } }
      faceitMatches = Number(faceitData.stats.totalMatches) || 0;
      faceitWins = Number(faceitData.stats.wins) || 0;
      faceitLosses = Number(faceitData.stats.losses) || 0;
      faceitWinRate = Number(faceitData.stats.winRate) || 0;
    } else if (faceitData?.teamStats) {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º—ã –∏–∑ FaceitAPI.getTeamStats() —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const ts = faceitData.teamStats;
      faceitMatches = Number(ts['Total Matches'] || 0) || 0;
      faceitWins = Number(ts['Wins'] || 0) || 0;
      faceitLosses = Number(ts['Losses'] || 0) || 0;
      faceitWinRate = parseFloat(String(ts['Win Rate'] || '0').replace('%', '')) || 0;
    }

    const overview = {
      totalMatches: (hltvData.total || 0) + faceitMatches,
      totalWins: (hltvData.wins || 0) + faceitWins,
      totalLosses: (hltvData.losses || 0) + faceitLosses,
      overallWinRate: 0,
      hltv: {
        matches: hltvData.total || 0,
        wins: hltvData.wins || 0,
        losses: hltvData.losses || 0,
        winRate:
          hltvData.total > 0
            ? ((hltvData.wins / hltvData.total) * 100).toFixed(1)
            : 0,
      },
      faceit: {
        matches: faceitMatches,
        wins: faceitWins,
        losses: faceitLosses,
        winRate: faceitWinRate,
      },
      lastUpdated: new Date().toISOString(),
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π win rate
    const totalMatches = overview.totalMatches;
    if (totalMatches > 0) {
      overview.overallWinRate = (
        (overview.totalWins / totalMatches) *
        100
      ).toFixed(1);
    }

    res.json(overview);
  } catch (error) {
    console.error("‚ùå Error fetching overview stats:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// Clear cache endpoint
app.post("/api/cache/clear", (req, res) => {
  try {
    console.log("üßπ Clearing cache...");

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
    Object.keys(cache).forEach((category) => {
      Object.keys(cache[category]).forEach((key) => {
        cache[category][key] = { data: null, ts: 0 };
      });
    });

    res.json({
      message: "Cache cleared successfully",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("‚ùå Error clearing cache:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error("‚ùå Server error:", error);
  res.status(500).json({
    error: "Internal server error",
    message: error.message,
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: "Endpoint not found",
    path: req.path,
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ FORZE Backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
  console.log(`üéØ API endpoints:`);
  console.log(`   - GET /api/forze/matches - –º–∞—Ç—á–∏ HLTV`);
  console.log(`   - GET /api/forze/roster - —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã`);
  console.log(`   - GET /api/faceit/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FACEIT`);
  console.log(`   - GET /api/stats/overview - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
  console.log(`   - POST /api/cache/clear - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞`);
});
